@startuml
class CardsAdapter {
    - words: List<Word>
    - context: Context
    - tts: TextToSpeech?
    - flippedStates: BooleanArray
    --
    + CardsAdapter(words: List<Word>, context: Context)
    + onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder
    + onBindViewHolder(holder: CardViewHolder, position: Int): void
    + getItemCount(): Int
    + onInit(status: Int): void
    + stopTTS(): void
    + onDestroy(): void
}

class CardViewHolder {
    + cardView: CardView
    + cardText: TextView
    + volumeBtn: ImageButton
    --
    + CardViewHolder(view: View)
}

CardsAdapter --> CardViewHolder : contains

class StudySetDetailsFragment {
    - _binding: ActivitySpecificStudysetBinding?
    - studySet: StudySet?
    - wordsAdapter: SpecificStudySetAdapter
    - allWords: List<Word>
    - sharedPreferences: SharedPreferences
    --
    + onCreate(savedInstanceState: Bundle?): void
    + onCreateOptionsMenu(menu: Menu, inflater: MenuInflater): void
    + onOptionsItemSelected(item: MenuItem): Boolean
    - parseWordsFromString(wordsString: String): List<Word>
    - loadMarkedFlags(wordsList: List<Word>): void
    - saveMarkedWords(): void
}

class SpecificStudySetAdapter {
    + updateData(newWords: List<Word>): void
    + getAllWords(): List<Word>
}

class SpecificStudySetHolder {
    - term: TextView
    - translation: TextView
    - starBtn: ToggleButton
}

class Word {
    - term: String
    - translation: String
    - firstStage: Boolean
    - secondStage: Boolean
    - thirdStage: Boolean
    - forthStage: Boolean
    - isMarked: Boolean
    - showKeyboard: Boolean
    - id: String
}

StudySetDetailsFragment --> SpecificStudySetAdapter : uses
StudySetDetailsFragment --> StudySet : manages
SpecificStudySetAdapter --> SpecificStudySetHolder : contains

class CardModeFragment {
    - viewModel: CardModeViewModel
}

class CardModeViewModel {
    - sharedPreferences: SharedPreferences
    - _words: MutableLiveData<List<Word>>
    + words: LiveData<List<Word>>
    --
    + CardModeViewModel(sharedPreferences: SharedPreferences)
    + loadWords(rawString: String): void
}

CardModeFragment --> CardModeViewModel : uses
CardModeFragment --> CardsAdapter : uses

class CreateStudySetFragment {
    - _binding: FragmentCreateStudySetBinding?
    - binding: FragmentCreateStudySetBinding
    - viewModel: CreateStudySetViewModel
    - wordsAdapter: WordsAdapter
    - languageFrom: String
    - languageTo: String
    - isEditMode: Boolean
    - existingSet: StudySet?
    --
    - saveStudySet(): void
    - fillFieldsForEditing(set: StudySet): void
    - setSpinnerByShort(spinner: Spinner, langShort: String): void
    - setupLanguageSpinners(): void
    + onCreateOptionsMenu(menu: Menu, inflater: MenuInflater): void
    + onOptionsItemSelected(item: MenuItem): Boolean
}

class CreateStudySetViewModel {
    - repository: StudySetRepository
    - _studySetLiveData: MutableLiveData<StudySet>
    --
    + addStudySet(studySet: StudySet): void
    + updateStudySet(studySet: StudySet): void
    + loadStudySet(studySetId: Int): void
}

class WordsAdapter {
    + addWord(word: Word): void
    + getWords(): List<Word>
    + setWords(words: List<Word>): void
}

class WordsViewHolder {
    - termEditText: EditText
    - translationEditText: EditText
    - deleteBtn: ImageButton
    --
    + bind(word: Word): void
}

WordsAdapter --> WordsViewHolder : contains

class StudySet {
    + id: Int
    + name: String
    + words: String
    + language_to: String
    + language_from: String
    + amount_of_words: Int
    + marked_words: String
    + creator: String
    + sync_status: Int
}

class StudySetRepository {
    + allStudySets: LiveData<List<StudySet>>
    + insert(studySet: StudySet): Long
    + update(studySet: StudySet): void
    + delete(studySet: StudySet): void
    + getStudySetById(id: Long): StudySet?
}

CreateStudySetFragment --> CreateStudySetViewModel : uses
CreateStudySetFragment --> WordsAdapter : uses
CreateStudySetFragment --> StudySet : manages
CreateStudySetViewModel --> StudySet : manages
CreateStudySetViewModel --> StudySetRepository : uses

class StudySetsAdapter {
    - itemsList: List<StudySet>
    - originalList: List<StudySet>
    - filteredList: List<StudySet>
    --
    + onCreateViewHolder(parent: ViewGroup, viewType: Int): StudySetsHolder
    + getItemCount(): Int
    + onBindViewHolder(holder: StudySetsHolder, position: Int): void
    + getFilter(): Filter
    + updateList(newList: List<StudySet>): void
}

class StudySetsHolder {
    - title: TextView
    - amountOfWords: TextView
    - delete: ImageButton
    --
    + bind(item: StudySet): void
}

class StudySetDiffCallback {
    - oldList: List<StudySet>
    - newList: List<StudySet>
    --
    + getOldListSize(): Int
    + getNewListSize(): Int
    + areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean
    + areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean
}

interface Callback {
    + onDeleteClicked(item: StudySet, position: Int): void
    + onItemClicked(item: StudySet): void
}

StudySetsAdapter --> StudySetsHolder : contains
StudySetsAdapter --> StudySetDiffCallback : uses
StudySetsAdapter --> Callback : uses
StudySetsAdapter --> StudySet : manages
StudySetsHolder --> StudySet : binds
StudySetDiffCallback --> StudySet : compares

class ListenFragment {
    - _binding: FragmentAudioStageBinding?
    - binding: FragmentAudioStageBinding
    - viewModel: ListenViewModel
}

class ListenViewModel {
    - wordList: List<Word>
    - currentIndex: Int
    - _currentWord: MutableLiveData<Word>
    + currentWord: LiveData<Word>
    --
    + nextWord(): void
}

ListenFragment --> ListenViewModel : uses

class SpeechStageFragment {
    - _binding: FragmentSpeechStageBinding?
    - binding: FragmentSpeechStageBinding
    - viewModel: SpeechStageViewModel
}

class SpeechStageViewModel {
    - wordList: List<Word>
    - currentIndex: Int
    - _currentWord: MutableLiveData<Word>
    + currentWord: LiveData<Word>
    --
    + nextWord(): void
    + getExpectedTerm(): String?
}

SpeechStageFragment --> SpeechStageViewModel : uses

class StudySetsListFragment {
    - _binding: FragmentStudySetsBinding?
    - binding: FragmentStudySetsBinding
    - viewModel: StudySetsListViewModel
    - adapter: StudySetsAdapter
    - fullList: List<StudySet>
    --
    - updateFilteredList(query: String): void
}

class StudySetsListViewModel {
    - _allStudySets: MutableLiveData<List<StudySet>>
    + allStudySets: LiveData<List<StudySet>>
    --
    + StudySetsListViewModel(repository: StudySetRepository)
    + deleteStudySet(studySet: StudySet): void
}

StudySetsListFragment --> StudySetsListViewModel : uses
StudySetsListFragment --> StudySetsAdapter : uses
StudySetsListFragment --> StudySet : manages
StudySetsListViewModel --> StudySet : manages
StudySetsListViewModel --> StudySetRepository : uses

class TermStageFragment {
    - _binding: FragmentTermDefinitionStageBinding?
    - binding: FragmentTermDefinitionStageBinding
    - viewModel: TermStageViewModel
}

class TermStageViewModel {
    - wordList: List<Word>
    - currentIndex: Int
    - _currentWord: MutableLiveData<Word>
    + currentWord: LiveData<Word>
    --
    + checkAnswer(answer: String): void
    - nextWord(): void
}

TermStageFragment --> TermStageViewModel : uses

class TranslationStageFragment {
    - _binding: FragmentTermDefinitionStageBinding?
    - binding: FragmentTermDefinitionStageBinding
    - viewModel: TranslationStageViewModel
}

class TranslationStageViewModel {
    - wordList: List<Word>
    - currentIndex: Int
    - _currentWord: MutableLiveData<Word>
    + currentWord: LiveData<Word>
    --
    + checkTranslationAnswer(answer: String): void
    - nextWord(): void
}

TranslationStageFragment --> TranslationStageViewModel : uses
class BaseVariables {
    {static} + LANGUAGES: List<String>
    {static} + LANGUAGES_SHORT: List<String>
}

interface DaoStudySet {
    + getAllStudySets(): LiveData<List<StudySet>>
    + getAllStudySetsFlow(): Flow<List<StudySet>>
    + insertStudySet(studySet: StudySet): Long
    + updateStudySet(studySet: StudySet): void
    + deleteStudySet(studySet: StudySet): void
    + deleteById(id: Int): void
    + getSpecificStudySet(id: Int): LiveData<StudySet>
    + getNoLiveDataSpecificStudySet(id: Int): StudySet?
    + getUnsyncedStudySet(): List<StudySet>
    + upsert(studySets: List<StudySet>): void
    + upsertStudySet(studySet: StudySet): void
    + deleteAll(): void
}

class StudySetDatabase {
    + studySetDao(): DaoStudySet
}

StudySetDatabase --> DaoStudySet : contains

class DatabaseModule {
    {static} + provideDatabase(context: Context): StudySetDatabase
    {static} + provideDao(database: StudySetDatabase): DaoStudySet
}

class SharedPreferencesModule {
    {static} + provideSharedPreferences(context: Context): SharedPreferences
}

DatabaseModule --> StudySetDatabase : provides
DatabaseModule --> DaoStudySet : provides

class NonSwipeableViewPager {
    + NonSwipeableViewPager(context: Context)
    + NonSwipeableViewPager(context: Context, attrs: AttributeSet?)
    + onInterceptTouchEvent(event: MotionEvent): Boolean
    + onTouchEvent(event: MotionEvent): Boolean
}

NonSwipeableViewPager ..|> ViewPager

class MainActivity {
    - binding: ActivityMainBinding
    --
    + onCreate(savedInstanceState: Bundle?): void
    + onSupportNavigateUp(): Boolean
}

class MyApplication {
    --
    + onCreate(): void
}


class QuizViewModel {
  + {static} Question
  - _currentQuestion: MutableLiveData<Question>
  + currentQuestion: LiveData<Question>
  - questionList: List<Question>
  - currentIndex: Int
  + setQuestionsFromWords(words: List<Word>): Unit
  + loadNextQuestion(): Unit
  + checkAnswer(selected: String): Boolean
}

class Question {
  + term: String
  + correctAnswer: String
  + options: List<String>
}

class QuizFragment {
  - _binding: FragmentQuizStageBinding?
  + binding: FragmentQuizStageBinding
  - viewModel: QuizViewModel
  - wordList: List<Word>
  + onCreate(savedInstanceState: Bundle?): Unit
}

QuizViewModel "1" *-- "0..N  " Question : contains
QuizFragment --> QuizViewModel : uses >
QuizFragment --> Question : uses >


class NotificationsFragment {
    - _binding: FragmentNotificationsBinding?
    - binding: FragmentNotificationsBinding
}

class NotificationsViewModel {
    - _text: MutableLiveData<String>
    + text: LiveData<String>
}

NotificationsFragment --> NotificationsViewModel : uses

class FirebaseRepository {
    - db: FirebaseFirestore
    - userProfilePreferencesManager: UserProfilePreferencesManager
    --
    + createUser(email: String, onSuccess: () -> Unit, onError: () -> Unit): void
    + addStudySet(studySet: StudySet, onSuccess: () -> Unit, onError: () -> Unit): void
    + getAllStudySets(onSuccess: (List<StudySet>) -> Unit, onError: () -> Unit): void
    + updateStudySet(studySet: StudySet): void
    + deleteStudySet(studySet: StudySet): void
    + updateSetFinished(studySetId: Int): void
    --
    - saveUserDocumentId(documentId: String): void
    - getStudySetsCollection(): CollectionReference
    - getStudySetDocument(studySetId: Int, onDocumentOperation: (DocumentReference) -> Unit): void
    --
    {static} - TAG: String
    {static} - USERS_COLLECTION: String
    {static} - STUDY_SETS_COLLECTION: String
    {static} - EMAIL_FIELD: String
    {static} - STUDY_SET_ID_FIELD: String
}

FirebaseRepository --> UserProfilePreferencesManager : uses

class UserProfilePreferencesManager {
    - sharedPreferences: SharedPreferences
    --
    + isLoggedIn(): Boolean
    + setUserDocumentId(userDocumentId: String): void
    + getUserDocumentId(): String?
    + clearLoginEmail(): void
    --
    {static} - KEY_USER_DOCUMENT_ID: String
}

UserProfilePreferencesManager --> SharedPreferences : uses

class UserProfileRepository {
    - userProfilePreferencesManager: UserProfilePreferencesManager
    - studySetRepository: StudySetRepository
    --
    + isLoggedIn(): Boolean
    + logout(): suspend Unit
}

UserProfileRepository --> UserProfilePreferencesManager : uses
UserProfileRepository --> StudySetRepository : uses

class StudySetDetailsActivity {
    - binding: ActivityStudySetBinding
    --
    + onCreate(savedInstanceState: Bundle?): void
    + onSupportNavigateUp(): Boolean
    --
    {static} - KEY_STUDY_SET: String
    {static} + newIntent(context: Context, studySet: StudySet): Intent
}

class LoginActivity {
    - binding: ActivityLoginBinding
    --
    + onCreate(savedInstanceState: Bundle?): void
}

class LoginFragment {
    - _binding: FragmentLoginPageBinding?
    - clientId: String
    - viewModel: LoginViewModel
    --
    + googleSignIn(): void
    + googleSignUp(): void
    + googleAuth(googleIdOption: GetGoogleIdOption): void
    + handleFailure(e: Exception): void
    + handleSignIn(result: GetCredentialResponse): void
    + openMainActivity(email: String): void
    + showLoader(): void
    + hideLoader(): void
    + handleShowError(error: String?): void
    + handleStartMainActivity(event: Unit?): void
    + handleLoading(show: Boolean?): void
}

LoginFragment --> LoginViewModel : uses

class LoginViewModel {
    - firebaseRepository: FirebaseRepository
    - studySetRepository: StudySetRepository
    - loader: MutableLiveData<Boolean>
    - startMainActivity: MutableLiveData<Unit?>
    - showError: MutableLiveData<String?>
    --
    + login(email: String): void
    + handleCreateUserSuccess(): void
    + handleGetAllStudySetsFailed(): void
    + handleGetAllStudySetsSuccess(studySets: List<StudySet>): void
    + startMainActivity(): void
    + handleCreateUserFailure(): void
    + hideLoader(): void
    + showLoader(): void
}

LoginViewModel --> FirebaseRepository : uses
LoginViewModel --> StudySetRepository : uses

class ProfileFragment {
    - _binding: FragmentProfileBinding?
    - viewModel: ProfileViewModel
    --
    + updateProfile(): void
    + syncData(): void
    --
    {static} - TAG: String
}

ProfileFragment --> ProfileViewModel : uses

class ProfileViewModel {
    - sharedPreferences: SharedPreferences
    - repository: StudySetRepository
    - userProfileRepository: UserProfileRepository
    - firebaseRepository: FirebaseRepository
    - _userProfile: MutableLiveData<UserProfile>
    - showLoader: MutableLiveData<Boolean?>
    --
    + userProfile: LiveData<UserProfile>
    + statistics: LiveData<Statistics>
    + updateCompletedSets(studySet: StudySet): void
    + signOut(): suspend Unit
    + sync(): void
}

ProfileViewModel --> StudySetRepository : uses
ProfileViewModel --> UserProfileRepository : uses
ProfileViewModel --> FirebaseRepository : uses

class MySplashActivity {
    - userProfileRepository: UserProfileRepository
    --
    + onCreate(savedInstanceState: Bundle?): void
}

MySplashActivity --> UserProfileRepository : uses
MySplashActivity --> MainActivity : navigates
MySplashActivity --> LoginActivity : navigates

class LoginViewModelTest {
    - viewModel: LoginViewModel
    - firebaseRepository: FirebaseRepository
    - studySetRepository: StudySetRepository
    - loaderObserver: Observer<Boolean>
    - startMainActivityObserver: Observer<Unit?>
    - showErrorObserver: Observer<String?>
    --
    + setup(): void
    + testLoginSuccess(): void
    + testLoginFailure(): void
    + testHandleCreateUserSuccess(): void
    + testHandleCreateUserFailure(): void
    + tearDown(): void
}

LoginViewModelTest --> LoginViewModel : tests

class StudySetRepositoryTest {
    - repository: StudySetRepository
    - dao: DaoStudySet
    - database: StudySetDatabase
    --
    + setup(): void
    + testInsertStudySet(): void
    + testUpdateStudySet(): void
    + testDeleteStudySet(): void
    + testGetAllStudySets(): void
    + tearDown(): void
}

StudySetRepositoryTest --> DaoStudySet : mocks
StudySetRepositoryTest --> StudySetDatabase : mocks
@enduml